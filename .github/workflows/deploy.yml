name: Build and Deploy MkDocs Site + PDFs

on:
  push:
    branches: 
      - main
      - '**'
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Pandoc
        if: github.ref_name == 'main'
        run: |
          wget https://github.com/jgm/pandoc/releases/download/3.5/pandoc-3.5-1-amd64.deb
          sudo dpkg -i pandoc-3.5-1-amd64.deb
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-latex-extra texlive-latex-recommended \
                                  texlive-fonts-recommended texlive-fonts-extra

      - name: Copy Pandoc templates
        if: github.ref_name == 'main'
        run: |
          sudo mkdir -p /usr/share/pandoc/data/templates
          sudo cp templates/custom.latex /usr/share/pandoc/data/templates/custom.latex
          sudo cp templates/listings-setup.tex /usr/share/pandoc/data/templates/listings-setup.tex

      - name: Install Python and MkDocs dependencies
        run: |
          sudo apt-get install -y python3-pip
          python3 -m pip config set global.break-system-packages true
          pip install mkdocs==1.4.2
          pip install mkdocs-material==9.6.9 
          pip install pymdown-extensions
          pip install mkdocs-material[extras]
          pip install markdown-katex
          pip install mkdocs-gen-files
          pip install mkdocs-minify-plugin
          pip install markdown-katex
          pip install pyyaml
          cd $GITHUB_WORKSPACE
          pip install . 

      - name: Install PDF utilities
        if: github.ref_name == 'main'
        run: |
          sudo apt-get install -y poppler-utils
          
      - name: Build MkDocs site
        run: |
          cd $GITHUB_WORKSPACE
          BRANCH="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"
          echo "Branch detected: $BRANCH"

          if [ "$BRANCH" != "main" ]; then

            echo "Patching mkdocs.yml"
            BRANCH=$BRANCH python3 .github/scripts/patch_mkdocs.py

            mkdir -p docs
            echo "# WORK IN PROGRESS
            This is the branch work page **$BRANCH** - click on Your-Book menu" > docs/index.md
          fi

          echo "==== mkdocs.yml content before build ===="
          cat mkdocs.yml
          echo "========================================="

          echo "Building site"
          mkdocs build

      - name: Convertion PDF/ePUB
        if: github.ref_name == 'main'
        run: |
          cd $GITHUB_WORKSPACE
          PDF_DIR=site/download
          OUTPUT_FILE="$PDF_DIR/pdf-list.json"
          mkdir -p "$PDF_DIR"

          cd docs/books || exit 1
          book_dirs=$(find . -mindepth 1 -maxdepth 1 -type d ! -name '.*')
          if [ -z "$book_dirs" ]; then
              echo "No actual book directories found in docs/books. Skipping PDF build."
              exit 0
          fi

          pdf_files=()

          for book in */; do
              if [ "${book%/}" = "menu" ]; then
                  echo "Skipping $book"
                  continue
              fi

              echo "Processing $book"
              cd "$book" || continue

              md_files="main.md"
              if ls chapter*.md 1>/dev/null 2>&1; then
                  for chapter in $(ls chapter*.md | sort -V); do
                      md_files="$md_files $chapter"
                  done
              fi

              if [ -n "$md_files" ]; then
                  cat /dev/null > combined.md
                  for file in $md_files; do
                      sed '/^---$/,/^---$/d' "$file" >> combined.md
                      echo "" >> combined.md
                      echo "\pagebreak" >> combined.md
                  done

                  echo "Cleaning up markdown references"
                  python3 ../../../.github/scripts/clean_md_links.py combined.md
                  sed -i -e 's/<a\s*[^>]*id="\([^"]*\)"[^>]*>/\\label{\1}/g' -e 's/\xC2\xA0/ /g' combined.md

                  pandoc -s --number-sections --listings --template "/usr/share/pandoc/data/templates/custom.latex" \
                        --metadata-file header.yml --output="${book%/}.pdf" combined.md

                  if [ -f "${book%/}.pdf" ]; then
                      echo "PDF generated successfully for $book"
                      cp "${book%/}.pdf" ../../../"$PDF_DIR/"
                      pdf_files+=("\"${book%/}.pdf\"")

                      # Generate PNG icons for the PDF
                      echo "Generating icon for ${book%/}.pdf"
                      output_png=../../../"$PDF_DIR/${book%/}"
                      pdftoppm -png -f 1 -l 1 -singlefile "${book%/}.pdf" "$output_png"

                      if [ -f "$output_png.png" ]; then
                          echo "Cleaning up markdown for EPUB"
                          python3 ../../../.github/scripts/clean_for_epub.py combined.md combined-epub.md
                          echo "Generating mumbering for sections, figures and tables for EPUB"
                          python3 ../../../.github/scripts/epub_numbering.py combined-epub.md
                          echo "Generating EPUB for ${book%/}.epub"
                          pandoc -s --metadata-file=header-epub.yml --epub-cover-image="$output_png.png" --output="${book%/}.epub" combined-epub.md
                          if [ -f "${book%/}.epub" ]; then
                              echo "EPUB generated successfully for $book"
                              cp "${book%/}.epub" ../../../"$PDF_DIR/"
                          else
                              echo "Failed to generate EPUB for $book. See pandoc.log for details."
                          fi
                      else
                          echo "Failed to generate icon for ${book%/}.pdf and therefore epub version"
                      fi
                  else
                      echo "PDF generation failed for $book. See pandoc.log for details."
                  fi
              else
                  echo "No markdown files found for $book. Skipping PDF generation."
              fi
          done
          cd $GITHUB_WORKSPACE

          # Write JSON list of PDFs
          pdf_files_json=$(IFS=, ; echo "[${pdf_files[*]}]")
          echo "$pdf_files_json" > "$OUTPUT_FILE"
          echo "Generated $OUTPUT_FILE with ${#pdf_files[@]} PDFs and icons."

      - name: List site output
        run: ls -R ./site

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./site
          keep_files: true
          destination_dir: ${{ github.ref_name != 'main' && github.ref_name || '' }}

      - name: Clean up old branch previews
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          PAGES_ROOT=./site  # root of gh-pages content
          # Directories to never remove (main site folders)
          WHITELIST="addon assets books download images search stylesheets"

          echo "Fetching list of active branches..."
          ACTIVE_BRANCHES=$(gh api repos/${GITHUB_REPOSITORY}/branches --jq '.[].name')

          echo "Active branches:"
          echo "$ACTIVE_BRANCHES"

          echo "Scanning deployed branch previews..."
          for dir in "$PAGES_ROOT"/*; do
            if [ -d "$dir" ]; then
              branch_name=$(basename "$dir")

              # Skip whitelisted folders
              if echo "$WHITELIST" | grep -qw "$branch_name"; then
                echo "Skipping main site folder: $branch_name"
                continue
              fi

              # Check if the branch is active
              if ! echo "$ACTIVE_BRANCHES" | grep -qw "$branch_name"; then
                echo "Removing obsolete preview folder: $branch_name"
                rm -rf "$dir"
              else
                echo "Keeping active branch folder: $branch_name"
              fi
            fi
          done
